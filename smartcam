Architecture
. 4 processes
 1) Main process
 2) . read frame thread
      -- determine / set resolution
      -- worry about framerate here?
      -- metadata:
        -- time
        -- resolution
        -- format
      -- add to QueueHandler
    . QueueHandler thread
      -- put current image on ImageProcessor and VideoProcessor queues
 3) . convert images to video
     -- read images from queue
     -- at some point, write to file
     -- add start, end, and file name to database
 4) . get frame from queue thread
    . determine if in motion
    . save in-motion start/stop times to database


motion detection loop
. current:
get frame
set self.current
if not background or background expired:
  set self.background
  write video buffer
  continue
if not in motion
  self._in_motion = self.detect_motion()
if self._in_motion:
  self.detect_motion() ### to get contours
  show image with contours drawn
  add image to video array

. instead:
if self.current:
  self.background = self.current
  self.current = self.get_frame()
in_motion = self.detect_motion()
if in_motion:
  set self.last_motion_time = self.current.time
  add self.current to video array
elif self.motion_timeout()
  write video buffer

# Maybe a clue to video format issues:
OpenCV: FFMPEG: tag 0x3234706d/'mp42' is not supported with codec id 16 and format 'avi / AVI (Audio Video Interleaved)'
OpenCV: FFMPEG: fallback to use tag 0x3234504d/'MP42'



# error in docker:
INFO:__main__:detect_objects: 0:01:01.248011
ERROR:__main__:exception: [Errno 28] No space left on device
-- it's a shared memory limitation issue

### rpi3 timeout issue writing videos to s3:
Process FfmpegVideoWriter-4:
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/connectionpool.py", line 544, in urlopen
    body=body, headers=headers)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/connectionpool.py", line 349, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "/usr/lib/python3.5/http/client.py", line 1107, in request
    self._send_request(method, url, body, headers)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 130, in _send_request
    self, method, url, body, headers, *args, **kwargs)
  File "/usr/lib/python3.5/http/client.py", line 1152, in _send_request
    self.endheaders(body)
  File "/usr/lib/python3.5/http/client.py", line 1103, in endheaders
    self._send_output(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 165, in _send_output
    self._handle_expect_response(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 208, in _handle_expect_response
    self._send_message_body(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 235, in _send_message_body
    self.send(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 242, in send
    return HTTPConnection.send(self, str)
  File "/usr/lib/python3.5/http/client.py", line 905, in send
    self.sock.sendall(datablock)
  File "/usr/lib/python3.5/ssl.py", line 899, in sendall
    v = self.send(data[count:])
  File "/usr/lib/python3.5/ssl.py", line 869, in send
    return self._sslobj.write(data)
  File "/usr/lib/python3.5/ssl.py", line 594, in write
    return self._sslobj.write(data)
socket.timeout: The write operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/adapters.py", line 370, in send
    timeout=timeout
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/connectionpool.py", line 597, in urlopen
    _stacktrace=sys.exc_info()[2])
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/util/retry.py", line 245, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/packages/six.py", line 309, in reraise
    raise value.with_traceback(tb)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/connectionpool.py", line 544, in urlopen
    body=body, headers=headers)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/packages/urllib3/connectionpool.py", line 349, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "/usr/lib/python3.5/http/client.py", line 1107, in request
    self._send_request(method, url, body, headers)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 130, in _send_request
    self, method, url, body, headers, *args, **kwargs)
  File "/usr/lib/python3.5/http/client.py", line 1152, in _send_request
    self.endheaders(body)
  File "/usr/lib/python3.5/http/client.py", line 1103, in endheaders
    self._send_output(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 165, in _send_output
    self._handle_expect_response(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 208, in _handle_expect_response
    self._send_message_body(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 235, in _send_message_body
    self.send(message_body)
  File "/usr/local/lib/python3.5/dist-packages/botocore/awsrequest.py", line 242, in send
    return HTTPConnection.send(self, str)
  File "/usr/lib/python3.5/http/client.py", line 905, in send
    self.sock.sendall(datablock)
  File "/usr/lib/python3.5/ssl.py", line 899, in sendall
    v = self.send(data[count:])
  File "/usr/lib/python3.5/ssl.py", line 869, in send
    return self._sslobj.write(data)
  File "/usr/lib/python3.5/ssl.py", line 594, in write
    return self._sslobj.write(data)
botocore.vendored.requests.packages.urllib3.exceptions.ProtocolError: ('Connection aborted.', timeout('The write operation timed out',))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/app/smartcam/video_writer.py", line 82, in run
    writer(frame)
  File "/app/smartcam/video_writer.py", line 63, in writer
    self.cloud_writer.write_video(local_video)
  File "/app/smartcam/cloud/aws.py", line 50, in write_video
    self.client.upload_file(local_video.path, self.bucket, key)
  File "/usr/local/lib/python3.5/dist-packages/boto3/s3/inject.py", line 106, in upload_file
    extra_args=ExtraArgs, callback=Callback)
  File "/usr/local/lib/python3.5/dist-packages/boto3/s3/transfer.py", line 275, in upload_file
    future.result()
  File "/usr/local/lib/python3.5/dist-packages/s3transfer/futures.py", line 73, in result
    return self._coordinator.result()
  File "/usr/local/lib/python3.5/dist-packages/s3transfer/futures.py", line 233, in result
    raise self._exception
  File "/usr/local/lib/python3.5/dist-packages/s3transfer/tasks.py", line 126, in __call__
    return self._execute_main(kwargs)
  File "/usr/local/lib/python3.5/dist-packages/s3transfer/tasks.py", line 150, in _execute_main
    return_value = self._main(**kwargs)
  File "/usr/local/lib/python3.5/dist-packages/s3transfer/upload.py", line 679, in _main
    client.put_object(Bucket=bucket, Key=key, Body=body, **extra_args)
  File "/usr/local/lib/python3.5/dist-packages/botocore/client.py", line 317, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File "/usr/local/lib/python3.5/dist-packages/botocore/client.py", line 602, in _make_api_call
    operation_model, request_dict)
  File "/usr/local/lib/python3.5/dist-packages/botocore/endpoint.py", line 143, in make_request
    return self._send_request(request_dict, operation_model)
  File "/usr/local/lib/python3.5/dist-packages/botocore/endpoint.py", line 172, in _send_request
    success_response, exception):
  File "/usr/local/lib/python3.5/dist-packages/botocore/endpoint.py", line 265, in _needs_retry
    caught_exception=caught_exception, request_dict=request_dict)
  File "/usr/local/lib/python3.5/dist-packages/botocore/hooks.py", line 227, in emit
    return self._emit(event_name, kwargs)
  File "/usr/local/lib/python3.5/dist-packages/botocore/hooks.py", line 210, in _emit
    response = handler(**kwargs)
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 183, in __call__
    if self._checker(attempts, response, caught_exception):
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 251, in __call__
    caught_exception)
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 277, in _should_retry
    return self._checker(attempt_number, response, caught_exception)
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 317, in __call__
    caught_exception)
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 223, in __call__
    attempt_number, caught_exception)
  File "/usr/local/lib/python3.5/dist-packages/botocore/retryhandler.py", line 359, in _check_caught_exception
    raise caught_exception
  File "/usr/local/lib/python3.5/dist-packages/botocore/endpoint.py", line 213, in _get_response
    proxies=self.proxies, timeout=self.timeout)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/sessions.py", line 573, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/botocore/vendored/requests/adapters.py", line 415, in send
    raise ConnectionError(err, request=request)
botocore.vendored.requests.exceptions.ConnectionError: ('Connection aborted.', timeout('The write operation timed out',))


read frame
. pipe to video
. detection_motion
  .filter -- motion_detected
  .write image to kinesis
  .write image to video queue


major bottleneck on rpi videos:

## p.wait time:
for i in $(docker ps -a | grep debug | awk '{print $1}'); do
  docker logs -f $i | grep 'Time to p.wait' | awk '{sum += $NF; n++} END { print sum / n;}'
done

# average of ~7 seconds after each video is written
13.3078
9.56516
8.34205
6.45271
6.84574
nan
nan
6.50646
7.5401
6.41219
6.97694
4.58891


# writing to s3:
for i in $(docker ps -a | grep debug | awk '{print $1}'); do
  docker logs -f $i | grep 'Time for cloud_write.write_video' | awk '{sum += $NF; n++} END { print sum / n;}'
done

# not particularly meaningful without knowing size of videos, but this
# does show amount of time we're sitting around blocking _everything_ else
66.8626
84.7796
88.4794
60.7142
72.2738
nan
nan
77.3974
81.7616
89.0775
51.1508
128.718

for i in $(docker ps -a | grep debug | awk '{print $1}'); do
  docker logs -f $i | grep 'Time to close pipe stdin' | awk '{sum += $NF; n++} END { print sum / n;}'
done
0.00399267
0.00158318
0.00127952
0.00105918
0.00089652
nan
nan
0.00530976
0.00172283
0.00190476
0.000988324
0.00167857


for i in $(docker ps -a | grep debug | awk '{print $1}'); do
  docker logs -f $i | grep 'Time write video frame to pipe' | awk '{sum += $NF; n++} END { print sum / n;}'
done
0.219528
0.305564
0.242204
0.164571
0.137218
nan
nan
0.261532
0.944276
0.206981
0.114101
0.282632


video_writer -> ffmpeg buffer -> chunk writer


read from queue:
  if frame:
    if no ffmpeg process:
      instantiate ffmpeg
    if no api request open:
      initiate api request
    write frame
  if frame is none:
    close out writer


read from queue:
  if frame:


rxpy.observable(queue) \
 ## frame will either be image or None at this point
 lazily instantiate ffmpeg
 do appropriate thing with image/none type


###########
import queue
import rx

q = queue.Queue()


def on_next(it):
  print(it)


def on_err(it):
  raise it


def get_item():
  while True:
    try:
      frame = q.get()
      yield frame
    except queue.Empty:
      continue


rx.Observable.from_iterable(get_item()) \
      .subscribe(
        on_next,
        on_err,
        lambda: print('Complete'))

#########################


########################
import queue
import rx
from rx.subjects import Subject

q = queue.Queue()


def on_next(it):
  print(it)


def on_err(it):
  raise it


def get_item():
  while True:
    try:
      frame = q.get()
      yield frame
    except queue.Empty:
      continue

subj = Subject()

subj.subscribe(on_next, on_err, lambda: print('Complete'))


#########################


def t_read(e):
  with open(e) as f:
    while True:
      g = f.read(8000)
      if len(g) == 0: break
      print("READ %s bytes" % len(g))
  print('exiting')



####################################

import requests
import os

def gen():
  for i in range(10):
    yield os.urandom(100)

def gen2():
  while True:
    print('yielding')
    yield os.urandom(100)

url = "http://i7:8080/videodata"
#url = "http://zenbook:5000/videodata"
r = requests.post(url, data=gen2())

