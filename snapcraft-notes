# snap systemd service creation:
snapd/wrappers/services.go

# snapcraft command wrapper generation:
snapcraft/snapcraft/internal/meta.py 

# snapcraft schema:
snapcraft/schema/snapcraft.yaml

# snapd doesn't autoconnect network-observe plugin -- this is how you do it:
snap connect savi:network-observe ubuntu-core:network-observe

# pluginhandler
. this code primarily called by snapcraft/internal/parts.py

# local plugins
. code for this in PluginHandler._load_code

snapcraft/main.py
. main builds options using docopt, passes to run
. run:
 - parse args

############################
import snapcraft


import inspect
# list class methods:
inspect.getmembers(snapcraft.BasePlugin)

# list instance methods:
a = snapcraft.BasePlugin('barf', {})
for i in inspect.getmembers(a, predicate=inspect.ismethod): print(i)

import types
def functions(cls):
    return [x for x, y in cls.__dict__.items() if type(y) == types.FunctionType]

# no worko:
def methods(cls):
    return [x for x, y in cls.__dict__.items() if type(y) == types.MethodType]
##################

### no dependencies -- I think I like this best -- it does ignore 
### properties, though, but that's probably fine:
for i in snapcraft.BasePlugin.__dict__: 
  if 'function' in snapcraft.BasePlugin.__dict__[i].__repr__(): 
    print(i)

# instance attributes:
temp_plugin = snapcraft.BasePlugin('base', {})
for attr in temp_plugin.__dict__:
    if not attr.startswith('__'): 
      if 'function' not in temp_plugin.__dict__[attr].__repr__(): 
        if 'property' not in temp_plugin.__dict__[attr].__repr__(): 
          print(attr, getattr(temp_plugin, attr))

# class attributes:
for attr in snapcraft.BasePlugin.__dict__:
    if not attr.startswith('__'): 
      if 'function' not in snapcraft.BasePlugin.__dict__[attr].__repr__(): 
        if 'property' not in snapcraft.BasePlugin.__dict__[attr].__repr__(): 
          print(attr)



snapcraft/internal/parts.py
self.parts_dir


_baseplugin.py
########### this is how the partdir ( e.g., ./parts/camlistore ) gets
########### defined for baseplugin ######
    if project:
        self.partdir = os.path.join(project.parts_dir, part_dir)
    else:
        self.partdir = os.path.join(os.getcwd(), 'parts', part_dir)
#######################################################################


### make example:
        '        # self.run(["make", ],\n'
        '        #   cwd=self.builddir, env=self._build_environment())\n'
        '        # self.run(["make", "test"],\n'
        '        #   cwd=self.builddir, env=self._build_environment())\n'
        '        # self.run(["make", "install"],\n'
        '        #   cwd=self.builddir, env=self._build_environment())\n'


## TODO for init-plugin:
. schema -- class method
. instance attrs -- which ones need to be mentioned?
. what other methods need to be put in ?
. the 'make' example in comments is probably bad since there
  is already a 'make' plugin
. how to link to existing docs/plugin.md file for more info?
 -- http://snapcraft.io/docs/build-snaps/plugins
. testing:
 -- goes here: ./snapcraft/tests/test_commands_initplugin.py
 -- test bad plugin name fails and raises correct error message

# to run tests:
python3 -m unittest snapcraft.tests.test_commands_init_plugin.InitPluginTestCase
