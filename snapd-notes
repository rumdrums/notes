. cmd/snap/main.go is called, cli args passed to:
. cmd/snap/cmd.go, which executes the command __inside the core snap???__
... somehow or another, it gets here:
. cmd/snap/cmd_connect.go,
    which parses args
    and calls Execute interface which calls Client.Connect from here:
. client/interfaces.go
    which takes the args to connect, calling calling.performanInterfaceAction with json of args
    which does an async request to daemon, passing the json

###### SERVER SIDE #############
. daemon/api.go
    changeInterfaces: calls ifaceState.Connect/Disconnect as appropriate
. overlord/ifacestate/ifacemgr.go
    ifaceState.Connect/Disconnect generates state.Task which contains:
        the action -- connect/disconnect
        a string summary of the task -- eg, "connect blahplug to blahslot"
        the slot
        the plug
    then adds it to a state.TaskSet, which is returned
. daemon/api.go
    back to changeInterfaces:
    add a state.TaskSet to a state.NewChange
        -- it looks like the change is basically json:
            creates change, which includes the sring summary and the interfaces to be dis/connected
    the change ID gets returned in an AsyncResponse... so when the fuck does the change actually happen?

    ... current __theory__ is that once change.AddAll adds the task, handler takes off with it

### INTERFACE EVENT HANDLERS ####
. overlord/ifacestate/ifacemgr.go
    looks like Manager adds handlers for connect, disconnect, etc.
    runner.AddHandler("connect", m.doConnect, nil)
. overlord/ifacestate/handlers.go
    doConnect -- looks like this actually does the connection
        calls setupSnapSecurity
. overlord/ifacestate/helpers.go
    setupSnapSecurity
        iterates through all the various interface "backends"
        calls backend.Setup(snapInfo, devMode, repo)
. interfaces/apparmor/backend.go
    Setup:
        snippets, err := repo.SecuritySnippetsForSnap(snapName, interfaces.SecurityAppArmor)
. interfaces/repo.go
        SecuritySnippetsForSnap calls securitySnippetsForSnap
            which checks for and returns all permissions that a connected plug needs (see interfaces/builtin/common.go, ConnectedPlugSnippet, returns iface.connectedPlugAppArmor)
... back to previous:
    still in interfaces/apparmor/backend.go.Setup:
        backend.combineSnippets(snapInfo, devMode, snippets)
        # looks like any call to change interfaces reloads ALL:
        calls reloadProfiles(all)
            calls LoadProfile
. interfaces/apparmor/apparmor.go
    LoadProfile
        "apparmor_parser", "--replace", "--write-cache", "-O",
        "no-expr-simplify", fmt.Sprintf("--cache-loc=%s", dirs.AppArmorCacheDir),


type Interface interface {
    Name() string
    SanitizePlug(plug *Plug) error
    SanitizeSlot(slot *Slot) error
    PermanentPlugSnippet(plug *Plug, securitySystem SecuritySystem) ([]byte, error)
    ConnectedPlugSnippet(plug *Plug, slot *Slot, securitySystem SecuritySystem) ([]byte, error)
    PermanentSlotSnippet(slot *Slot, securitySystem SecuritySystem) ([]byte, error)
    ConnectedSlotSnippet(plug *Plug, slot *Slot, securitySystem SecuritySystem) ([]byte, error)
    AutoConnect() bool
}

type commonInterface struct {
    name                  string
    connectedPlugAppArmor string
    connectedPlugSecComp  string
    reservedForOS         bool
    autoConnect           bool
}


##### create-user stuff:

# CLIENT
. cmd/snap/cmd_create_user.go
  takes email address as argument
  creates cmdCreateUser struct, 
    whose Execute method instantiates Client()
    and calls cli.CreateUser(email adderss)
. client/client.go
  client.doSync("POST", "/v2/create-user" ... )
# SERVER
. daemon/api.go
  postCreateUser calls
    uid = postCreateUserUcrednetGetUID(r.RemoteAddr)
    v := storeUserInfo(createData.EMail)
      calls store/userinfo.go.UserInfo
. store/userinfo.go
  UserInfo
  gets public user data from canonical site and returns it in User struct
. back to daemon/api.go
  postCreateUser
    tries to add user to os using retrieved canonical store credentials like so:
    osutilAddExtraUser(v.Username, v.SSHKeys), aka osutil.AddExtraUser
### code weakness
  error messages don't distingusih between issue getting credentials 
  from store vs adding user
###

. osutil/user.go
  AddExtraUser
    gecos := "created by snapd"
    cmd := exec.Command("adduser", "--gecos", gecos, "--extrausers", "--disabled-password", name)


### test error:
FAIL: i18n_test.go:41: i18nTestSuite.SetUpTest

i18n_test.go:45:
    makeMockTranslations(c, localeDir)
i18n_test.go:94:
    c.Assert(err, IsNil)
... value *exec.Error = &exec.Error{Name:"msgfmt", Err:(*errors.errorString)(0xc820012510)} ("exec: \"msgfmt\": executable file not found in $PATH")

# fixed by:
sudo apt-get install gettext




#### user test:
pushd osutil && \
  go test -check.f $github.com/snapcore/snapd/osutil_test
popd

##########3### Fails:
FAIL: user_test.go:40: createUserSuite.TestAddExtraUser

user_test.go:53:
    c.Assert(err, check.IsNil)
... value *errors.errorString = &errors.errorString{s:"error converting uid: strconv.ParseInt: parsing \"\": invalid syntax"} ("error converting uid: strconv.ParseInt: parsing \"\": invalid syntax")


# with bash -X
FAIL: user_test.go:40: createUserSuite.TestAddExtraUser

user_test.go:55:
    c.Assert(err, check.IsNil)
... value *errors.errorString = &errors.errorString{s:"cannot set /tmp/check-5436099478104293176/0/.ssh ownership: chown /tmp/check-5436099478104293176/0/.ssh: operation not permitted"} ("cannot set /tmp/check-5436099478104293176/0/.ssh ownership: chown /tmp/check-5436099478104293176/0/.ssh: operation not permitted")

OOPS: 72 passed, 1 FAILED
--- FAIL: Test (0.12s)
FAIL
coverage: 81.1% of statements
exit status 1
FAIL	github.com/snapcore/snapd/osutil	0.125s
+ store_exit_code
+ EXIT_CODE=1
+ true
+ endmsg
+ '[' 1 -eq 0 ']'
+ p=failure.txt
+ m='Crushing failure and despair.'
+ echo

+ '[' -t 1 -a -z 1 ']'
+ echo 'Crushing failure and despair.'
Crushing failure and despair.
+ exit_with_exit_code
+ exit 1

###############
. to run above test:
sudo go test -tags=excludeintegration -v github.com/snapcore/snapd/osutil


# output:
################################
sudo GOPATH=/home/ubuntu/go go test -tags=excludeintegration -v github.com/snapcore/snapd/osutil
=== RUN   Test

----------------------------------------------------------------------
FAIL: io_test.go:77: AtomicWriteTestSuite.TestAtomicWriteFileSymlinkNoFollow

io_test.go:88:
    c.Assert(err, NotNil)
... value = nil


----------------------------------------------------------------------
FAIL: io_test.go:77: AtomicWriteTestSuite.TestAtomicWriteFileSymlinkNoFollow

io_test.go:88:
    c.Assert(err, NotNil)
... value = nil

OOPS: 71 passed, 2 FAILED
--- FAIL: Test (0.16s)
FAIL
exit status 1
FAIL	github.com/snapcore/snapd/osutil	0.169s
################################











#####################################################################
###################### tests for CreateUseronClassic stuff:
#####################################################################
----------------------------------------------------------------------
FAIL: api_test.go:3117: apiSuite.TestPostCreateUser

api_test.go:3147:
    c.Check(rsp.Type, check.Equals, ResponseTypeSync)
... obtained daemon.ResponseType = "error"
... expected daemon.ResponseType = "sync"


----------------------------------------------------------------------
FAIL: api_test.go:3092: apiSuite.TestPostCreateUserNoSSHKeys

api_test.go:3114:
    c.Check(rsp.Result.(*errorResult).Message, check.Matches, "cannot create user for popper@lse.ac.uk: no ssh keys found")
... value string = "cannot use create-user on classic"
... regex string = "cannot create user for popper@lse.ac.uk: no ssh keys found"


----------------------------------------------------------------------
FAIL: api_test.go:3080: apiSuite.TestPostCreateUserOnClassic

api_test.go:3089:
    c.Check(rsp.Result.(*errorResult).Message, check.Matches, "cannot use create-user on classic")
... value string = "cannot get ucrednet uid: no uid found"
... regex string = "cannot use create-user on classic"

OOPS: 119 passed, 1 skipped, 3 FAILED
--- FAIL: Test (18.50s)
FAIL
coverage: 79.8% of statements
exit status 1
FAIL	github.com/snapcore/snapd/daemon	18.527s

###########################################################################
###################################################################################################

client-side request handling
.client/client.go
	-- requests distill down to passing a url and method to client.doSync or client.doAsync,
		which in turn call client.do
		client.doSync returns a 'response', which looks like this:
#####
type response struct {
    Result     json.RawMessage `json:"result"`
    Status     string          `json:"status"`
    StatusCode int             `json:"status-code"`
    Type       string          `json:"type"`
    Change     string          `json:"change"`

    ResultInfo
}
#####

example: listing snaps:
. cmd/cmd_list.go
	instantiate client
	call cli.List
. client/packages.go
	calls client.snapsFromPath, passing url:
	  --  snaps, _, err := client.snapsFromPath("/v2/snaps", nil)
	client.snapsFromPath calls client.doSync




###############################
#### error running spread:
###############################
The following NEW packages will be installed:
  snapd
0 upgraded, 1 newly installed, 0 to remove and 110 not upgraded.
Need to get 0 B/6,108 kB of archives.
After this operation, 30.9 MB of additional disk space will be used.
Get:1 /home/gopath/src/github.com/snapcore/snapd_2.12ubuntu1_amd64.deb snapd amd64 2.12ubuntu1 [6,108 kB]
Selecting previously unselected package snapd.
(Reading database ... 41758 files and directories currently installed.)
Preparing to unpack .../snapd_2.12ubuntu1_amd64.deb ...
Unpacking snapd (2.12ubuntu1) ...
Processing triggers for man-db (2.7.5-1) ...
Setting up snapd (2.12ubuntu1) ...
+ '[' '!' -f /home/gopath/src/github.com/snapcore/snapd/snapd-state.tar.gz ']'
+ snap list
+ grep core
No snaps are installed yet. Try 'snap install hello-world'.
+ snap install test-snapd-tools
64.75 MB / 64.75 MB  100.00 % 15.86 MB/s urity profiles

error: cannot perform the following tasks:
- Setup snap "test-snapd-tools" (3) security profiles (cannot setup apparmor for snap "test-snapd-tools": cannot load apparmor profile "snap.test-snapd-tools.block": cannot load apparmor profile: exit status 1
apparmor_parser output:
Cache read/write disabled: interface file missing. (Kernel needs AppArmor 2.4 compatibility patch.)
Warning: unable to find a suitable fs in /proc/mounts, is it mounted?
Use --subdomainfs to override.
)
- Setup snap "test-snapd-tools" (3) security profiles (cannot load apparmor profile "snap.test-snapd-tools.block": cannot load apparmor profile: exit status 1
apparmor_parser output:
Cache read/write disabled: interface file missing. (Kernel needs AppArmor 2.4 compatibility patch.)
Warning: unable to find a suitable fs in /proc/mounts, is it mounted?
Use --subdomainfs to override.
)
-----}
2016/08/18 01:13:16 Discarding &{%!s(*spread.linode=&{0xc820077ba0 {0 0} true <nil> map[2210600:true] true [0xc8201d0240 0xc8201d02a0 0xc8201d0300 0xc8201d0360 0xc8201d03c0 0xc8201d0420 0xc8201d0480 0xc8201d04e0 0xc8201d0540 0xc8201d05a0 0xc8201d0600 0xc8201d0660 0xc8201d06c0 0xc8201d0720 0xc8201d0780 0xc8201d07e0 0xc8201d0840 0xc8201d08a0 0xc8201d0900] [0xc820498210 0xc820498390 0xc8204983c0 0xc8204983f0 0xc820498450 0xc8204984b0 0xc8204984e0 0xc820498510 0xc820498540 0xc820498570 0xc8204985a0 0xc8204985d0 0xc820498600 0xc820498630 0xc820498690 0xc820498720 0xc820498750 0xc820498780 0xc8204987b0 0xc8204987e0 0xc820498810 0xc820498840 0xc820498870 0xc8204988a0 0xc8204988d0 0xc820498900 0xc820498930 0xc820498960 0xc8204989c0 0xc8204989f0 0xc820498a50 0xc820498ab0 0xc820498ae0 0xc820498b10 0xc820498b40 0xc820498b70 0xc820498ba0 0xc820498bd0 0xc820498c00 0xc820498c30 0xc820498c60 0xc820498c90 0xc820498cc0 0xc820498cf0 0xc820498d50 0xc820498d80 0xc820498db0 0xc820498de0 0xc820498e10 0xc820498e40 0xc820498e70 0xc820498ea0 0xc820498ed0 0xc820498f00 0xc820498f30 0xc820498f60 0xc820498f90 0xc820498fc0 0xc820498ff0 0xc820499020 0xc820499050 0xc820499080 0xc8204990b0 0xc8204990e0 0xc820499140 0xc8204991d0 0xc820499200 0xc820499230 0xc820499260 0xc820499290 0xc8204992c0 0xc8204992f0 0xc820499320 0xc820499350 0xc820499380 0xc8204993b0 0xc820499410 0xc820499440 0xc820499470 0xc8204994a0 0xc820499500 0xc820499530 0xc820499560 0xc8204995c0 0xc8204995f0 0xc820499620 0xc820499650 0xc8204996b0 0xc8204996e0 0xc820499710 0xc820499740 0xc820499770 0xc8204997a0 0xc8204997d0 0xc820499800 0xc820499830 0xc820499860 0xc820499890 0xc8204998c0 0xc8204998f0 0xc820499950 0xc820499980 0xc8204999b0 0xc8204999e0 0xc820499a10 0xc820499a40 0xc820499a70 0xc820499aa0 0xc820499ad0 0xc820499b00 0xc820499b30 0xc820499b90 0xc820499bc0 0xc820499bf0 0xc820499c20 0xc820499c80 0xc820499ce0 0xc820499d10 0xc820499d40 0xc820499d70 0xc820499da0 0xc820499dd0 0xc820499e30 0xc820499e60 0xc820499e90 0xc820499ec0 0xc820499ef0 0xc820499f20 0xc820499f50 0xc820499f80 0xc820499fb0 0xc820442000 0xc820442060 0xc820442090 0xc8204420f0 0xc820442150 0xc820442180 0xc820442210 0xc820442270 0xc8204422a0 0xc8204422d0 0xc820442300 0xc820442330 0xc820442390 0xc8204423c0 0xc820442420 0xc820442480 0xc8204424b0 0xc820442510 0xc820442570 0xc8204425a0 0xc8204425d0 0xc820442600 0xc820442630 0xb50b80]}) {%!s(int=2210600) linode2210600 %!s(int=2) linode ubuntu-16.04 45.33.89.175 %!s(int=3090553) %!s(int=5925471) %!s(int=5925472)}}...
2016/08/18 01:13:17 Successful tasks: 0
2016/08/18 01:13:17 Aborted tasks: 72
2016/08/18 01:13:17 Failed tasks: 1
    - linode:ubuntu-16.04:tests/upgrade/basic
2016/08/18 01:13:17 Failed suite prepare: 1
    - linode:ubuntu-16.04:tests/main/
error: unsuccessful run

######## grub error on custo linode image
error: symbol `grub_video_fb_get_region' not found.


########### latest spread test error:

2016/08/20 03:03:29 Error restoring linode:ubuntu-16.04-64-grub:tests/main/install-sideload : &{
-----
+ for snap in basic test-snapd-tools basic-desktop
+ rm ./basic_1.0_all.snap
+ for snap in basic test-snapd-tools basic-desktop
+ rm ./test-snapd-tools_1.0_all.snap
+ for snap in basic test-snapd-tools basic-desktop
+ rm ./basic-desktop_1.0_all.snap
+ /tests/lib/reset.sh --reuse-core
/bin/bash: line 31: /tests/lib/reset.sh: No such file or directory
-----}
2016/08/20 03:03:29 Restoring linode:ubuntu-16.04-64-grub:tests/main/...
2016/08/20 03:03:29 Error restoring linode:ubuntu-16.04-64-grub:tests/main/ : &{
-----
+ /tests/lib/reset.sh
/bin/bash: line 26: /tests/lib/reset.sh: No such file or directory
-----}
2016/08/20 03:03:29 Successful tasks: 1
2016/08/20 03:03:29 Aborted tasks: 75
2016/08/20 03:03:29 Failed task restore: 1
    - linode:ubuntu-16.04-64-grub:tests/main/install-sideload
2016/08/20 03:03:29 Failed suite restore: 1
    - linode:ubuntu-16.04-64-grub:tests/main/
2016/08/20 03:03:29 Keeping &{%!s(*spread.linode=&{0xc82007bee0 {0 0} true <nil> map[2217866:true] true [0xc8201d0060 0xc8201d00c0 0xc8201d0120 0xc8201d0180 0xc8201d01e0 0xc8201d0240 0xc8201d02a0 0xc8201d0300 0xc8201d0360 0xc8201d03c0 0xc8201d0420 0xc8201d0480 0xc8201d04e0 0xc8201d0540 0xc8201d05a0 0xc8201d0600 0xc8201d0660 0xc8201d0720 0xc8201d0780 0xc8201d0960] [0xc82044c360 0xc82044c4b0 0xc82044c4e0 0xc82044c570 0xc82044c630 0xc82044c660 0xc82044c690 0xc82044c6f0 0xc82044c750 0xc82044c7e0 0xc82044c810 0xc82044c840 0xc82044c8a0 0xc82044c8d0 0xc82044c930 0xc82044c960 0xc82044c990 0xc82044c9c0 0xc82044c9f0 0xc82044ca20 0xc82044ca50 0xc82044ca80 0xc82044cae0 0xc82044cb10 0xc82044cb40 0xc82044cb70 0xc82044cba0 0xc82044cc00 0xc82044cc30 0xc82044cc60 0xc82044cc90 0xc82044cd20 0xc82044cd80 0xc82044cdb0 0xc82044cde0 0xc82044ce40 0xc82044ce70 0xc82044cea0 0xc82044ced0 0xc82044cf30 0xc82044cf90 0xc82044cfc0 0xc82044cff0 0xc82044d080 0xc82044d0b0 0xc82044d110 0xc82044d140 0xc82044d170 0xc82044d200 0xc82044d230 0xc82044d2c0 0xc82044d2f0 0xc82044d320 0xc82044d350 0xc82044d3b0 0xc82044d3e0 0xc82044d410 0xc82044d440 0xc82044d470 0xc82044d4d0 0xc82044d500 0xc82044d530 0xc82044d590 0xc82044d5f0 0xc82044d620 0xc82044d680 0xc82044d6e0 0xc82044d770 0xc82044d7a0 0xc82044d7d0 0xc82044d800 0xc82044d860 0xc82044d890 0xc82044d8c0 0xc82044d8f0 0xc82044d920 0xc82044d980 0xc82044d9e0 0xc82044da40 0xc82044da70 0xc82044dad0 0xc82044db30 0xc82044dbc0 0xc82044dbf0 0xc82044dc50 0xc82044dc80 0xc82044dce0 0xc82044dd10 0xc82044dd70 0xc82044dda0 0xc82044de00 0xc82044de30 0xc82044de60 0xc82044dec0 0xc82044def0 0xc82044df50 0xc82044df80 0xc82042c030 0xc82042c060 0xc82042c090 0xc82042c0f0 0xc82042c150 0xc82042c180 0xc82042c1b0 0xc82042c210 0xc82042c240 0xc82042c270 0xc82042c2a0 0xc82042c330 0xc82042c360 0xc82042c390 0xc82042c3c0 0xc82042c3f0 0xc82042c420 0xc82042c450 0xc82042c4b0 0xc82042c510 0xc82042c5d0 0xc82042c600 0xc82042c630 0xc82042c660 0xc82042c690 0xc82042c6c0 0xc82042c6f0 0xc82042c720 0xc82042c750 0xc82042c780 0xc82042c810 0xc82042c8a0 0xc82042c8d0 0xc82042c900 0xc82042c930 0xc82042c960 0xc82042c990 0xc82042c9c0 0xc82042c9f0 0xc82042ca20 0xc82042ca50 0xc82042ca80 0xc82042cae0 0xc82042cb40 0xc82042cb70 0xc82042cba0 0xc82042cc00 0xc82042cc30 0xc82042cc60 0xc82042ccc0 0xc82042ccf0 0xc82042cd20 0xc82042cd50 0xc82042cde0 0xc82042ce10 0xc82042ce40 0xc82042ce70 0xb50b80]}) {%!s(int=2217866) linode2217866 %!s(int=2) linode ubuntu-16.04-64-grub 104.237.137.24 %!s(int=3098882) %!s(int=5940772) %!s(int=5940773)}} at 104.237.137.24
2016/08/20 03:03:29 Reuse with: spread -pass=1a5df8c603f26c6f -keep -reuse=104.237.137.24
error: unsuccessful run
=======
another example: create user:
. cmd/cmd_create_user.go
  -- instantiate client (see below for details)
  -- create CreateUserRequest object, which takes cli args and puts them in a struct
  -- calls Client.CreateUser(&CreateUserRequest)
    -- client.CreateUser calls client.doSync
      -- calls client.do
        -- calls client.raw, creates the http request, and returns
           client.doer.Do(req), which actually does the request
       
  -- response / error is printed, optionally formatted in json

### snap command Client object:
cmd/snap/main.go
. Client is a function defined in this package, which instantiates a client.Client()
. calling Client() returns client.New(&clientConfig)

client type:
	type Client struct {
	    baseURL url.URL
	    doer    doer
	}


### how the daemon works:
. cmd/snapd/main.go initializes daemon
  d.New(), then
  d.Init()
 - initialization process registers routes, among other things 
. then starts it
  d.Start()
  -- does this in a go routine:
    if err := http.Serve(d.snapdListener, logit(d.router)); err != nil && d.tomb.Err() == tomb.ErrStillAlive {
        return err
    }


### process of handling request / response

. handler func / route gets registered

. request for a url with specific path comes in

. request is passed to router via router.ServeHTTP

# assuming:
. router calls handler.ServeHTTP() (which is Command.ServeHTTP)

. Command.ServeHTTP calls the actual function

. a response is returned from this

. and the serveHttp method is called on that response

